services:
  kafka:
    image: apache/kafka:4.0.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - internal

#  kafka:
#    image: bitnami/kafka:latest
#    container_name: kafka
#    ports:
#      - "9092:9092"
#      - "9094:9094"
#    environment:
#      KAFKA_CFG_NODE_ID: 0
#      KAFKA_CFG_PROCESS_ROLES: controller,broker
#      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
#      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
#      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
#      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
#    volumes:
#      - kafka-data:/bitnami/kafka
#    networks:
#      - internal

  auth-service-db:
    image: postgres:latest
    container_name: auth-service-db
    ports:
      - "5000:5432"
    environment:
      POSTGRES_DB: health_pro
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    volumes:
      - auth-service-db:/var/lib/postgresql/data
    networks:
      - internal

  clinic-service-db:
    image: postgres:latest
    container_name: clinic-service-db
    ports:
      - "5001:5432"
    environment:
      POSTGRES_DB: health_pro
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    volumes:
      - clinic-service-db:/var/lib/postgresql/data
    networks:
      - internal

  schedule-service-db:
    image: postgres:latest
    container_name: schedule-service-db
    ports:
      - "5002:5432"
    environment:
      POSTGRES_DB: health_pro
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
    volumes:
      - schedule-service:/var/lib/postgresql/data
    networks:
      - internal

#  auth-service:
#    build:
#      context: ./backend/auth-service
#      dockerfile: Dockerfile
#    container_name: auth-service
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-service-db:5432/health_pro
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: password
#      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
#      SPRING_JPA_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
#      SPRING_JPA_HIBERNATE_DDL_AUTO: create
#      SPRING_JPA_DEFER_DATASOURCE_INITIALIZATION: true
#      SPRING_SQL_INIT_MODE: always
#      JWT_SECRET: VGhpcy1pcy1hLXNlY3JldC1rZXktZm9yLUpXVC0yNTYtYml0IQ==
#      SERVER_PORT: 8080
#    depends_on:
#      - auth-service-db
#    ports:
#      - "8080:8080"
#    networks:
#      - internal
#
#  clinic-service:
#    build:
#      context: ./backend/clinic-service
#      dockerfile: Dockerfile
#    container_name: clinic-service
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://clinic-service-db:5432/health_pro
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: password
#      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
#      SPRING_JPA_HIBERNATE_DDL_AUTO: create
#      SPRING_JPA_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
#      SPRING_JPA_DEFER_DATASOURCE_INITIALIZATION: true
#      SPRING_SQL_INIT_MODE: always
#      SERVER_PORT: 8081
#    depends_on:
#      - clinic-service-db
#    ports:
#      - "8081:8081"
#    networks:
#      - internal
#
#  schedule-service:
#    build:
#      context: ./backend/schedule-service
#      dockerfile: Dockerfile
#    container_name: schedule-service
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://schedule-service-db:5432/health_pro
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: password
#      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
#      SPRING_JPA_HIBERNATE_DDL_AUTO: create
#      SPRING_JPA_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
#      SPRING_JPA_DEFER_DATASOURCE_INITIALIZATION: true
#      SPRING_SQL_INIT_MODE: always
#      SERVER_PORT: 8082
#    depends_on:
#      - schedule-service-db
#    ports:
#      - "8082:8082"
#    networks:
#      - internal
#
#  api-gateway:
#    build:
#      context: ./backend/api-gateway
#      dockerfile: Dockerfile
#    container_name: api-gateway
#    depends_on:
#      - auth-service
#      - clinic-service
#      - schedule-service
#    ports:
#      - "4004:4004"
#    networks:
#      - internal

#  frontend:
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#    container_name: frontend
#    environment:
#      NEXT_PUBLIC_API_URL: http://localhost:4004
#    ports:
#      - "3000:3000"
#    depends_on:
#      - api-gateway
#    networks:
#      - internal

volumes:
  clinic-service-db:
  auth-service-db:
  schedule-service:
  kafka-data:
    driver: local

networks:
  internal:
    driver: bridge